// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Omine.Infra;

#nullable disable

namespace Omine.Infra.Migrations
{
    [DbContext(typeof(OmineContext))]
    partial class OmineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimeGenero", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AnimeId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("AnimesGeneros", (string)null);
                });

            modelBuilder.Entity("Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios", (string)null);
                });

            modelBuilder.Entity("Omine.Domain.Entities.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Avaliacao")
                        .HasColumnType("real");

                    b.Property<int>("ClassificacaoIndicativa")
                        .HasColumnType("integer");

                    b.Property<int>("ClassificacaoRanking")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Estudio")
                        .HasColumnType("text");

                    b.Property<Guid>("IdGenero")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalEpisodios")
                        .HasColumnType("integer");

                    b.Property<string>("UrlImagem")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdGenero");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("Omine.Domain.Entities.AnimeLista", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AnimeId", "ListaId");

                    b.HasIndex("ListaId");

                    b.ToTable("AnimesListas", (string)null);
                });

            modelBuilder.Entity("Omine.Domain.Entities.Genero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("Omine.Domain.Entities.Lista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Avaliacao")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<int>("NivelAcesso")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Listas", (string)null);
                });

            modelBuilder.Entity("Omine.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("AnimeGenero", b =>
                {
                    b.HasOne("Omine.Domain.Entities.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omine.Domain.Entities.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("Comentario", b =>
                {
                    b.HasOne("Omine.Domain.Entities.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omine.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Omine.Domain.Entities.Anime", b =>
                {
                    b.HasOne("Omine.Domain.Entities.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("Omine.Domain.Entities.AnimeLista", b =>
                {
                    b.HasOne("Omine.Domain.Entities.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omine.Domain.Entities.Lista", "Lista")
                        .WithMany()
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Lista");
                });

            modelBuilder.Entity("Omine.Domain.Entities.Lista", b =>
                {
                    b.HasOne("Omine.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
